-- Anti-AFK Script
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    vu:CaptureController()
    vu:ClickButton2(Vector2.new())
end)

-- Rayfield Library Load
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

-- Function to show the notification every 90 seconds
local bugnotif = true

local function notifyLoop()
    while true do
        Rayfield:Notify({
            Title = "Is there any bugs?",
            Content = "Consider reporting any bugs in KeziHub Discord Server",
            Duration = 8,
            Image = "bell",
        })
        
        if not bugnotif then
            break
        end

        wait(120)
    end
end


-- UI Setup
local Window = Rayfield:CreateWindow({
    Name = "KeziHub V1.0",
    LoadingTitle = "Kezi Specialist HUB",
    LoadingSubtitle = "by KezTeam",
    Theme = 'Amethyst',
    ConfigurationSaving = {
        Enabled = false,
        FolderName = "KezHub",
        FileName = "KeziHubSettings"
    }
})
spawn(notifyLoop)


-- Turning off Rendering
local function optimizeON()
    local objects = {
        "Lampu Kota",
        "LightingAmbientRevamp"
    }

    for _, folderName in ipairs(objects) do
        local folder = workspace:FindFirstChild(folderName)
        if folder then
            folder:Destroy()
        end
    end

    local objects = {
        "Stuff",
        "RoadLight"
    }

    for _, folderName in ipairs(objects) do
        local folder = workspace.Map:FindFirstChild(folderName)
        if folder then
            folder:Destroy()
        end
    end

    
end

-- Tab for Stats
local StatsTab = Window:CreateTab("Stats" , "kanban") -- Title and icon

-- Minigames Information
StatsTab:CreateSection("Minigames Stats")

-- Points Tracking
local points = 0

-- Point Label
local pointsLabel = StatsTab:CreateParagraph({
    Title = "Points Recieved", -- Default Title
    Content = "Start Minigame Autofarm to display points"  -- Default message
})


-- Tab for Minigames
local MinigamesTab = Window:CreateTab("Minigames" , "workflow") -- Title and icon

-- Information
MinigamesTab:CreateParagraph({Title = "Information", Content = "Required 6 Instances to use this feature. Use 1 Main Account and 5 Dummy Accounts."})

-- Buy AVANZA Function
local function buycar()
    local args = {
        [1] = "Buy",
        [2] = "2021Avanza15CVT",
        [3] = "White",
        [4] = "Toyota"
    }
    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
end

-- Sell AVANZA Function
local function sellcar()
    local args = {
        [1] = "Sell",
        [2] = "2021Avanza15CVT"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
end    

-- Minigames Config Section
MinigamesTab:CreateSection("Minigames AutoFarm")

-- Pending Loop Time
local pendingLoopTime = 1.5 -- Default value
local Input = MinigamesTab:CreateInput({
    Name = "Pending Loop Time",
    CurrentValue = tostring(pendingLoopTime), -- Default value as string for easy conversion
    PlaceholderText = "Input Placeholder",
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local time = tonumber(Text) -- Convert the input text to a number
        if time then
            pendingLoopTime = time
        else
            pendingLoopTime = 1.5
        end
    end,
})

-- Global flags for minigame states
local isMiniGameWinActive = false
local isMiniGameLoseActive = false

-- Win Account Toggle
MinigamesTab:CreateToggle({
    Name = "Win Account",
    CurrentValue = false,
    Flag = "WinAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame(vehicle)
            buycar()
            local args = {
                [1] = "Enter",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        -- Function to leave the minigame
        local function leaveMinigame(vehicle)
            sellcar()
            local args = {
                [1] = "Leave",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            isMiniGameWinActive = true
            optimizeON()
            enterMinigame("2021Avanza15CVT")

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(pendingLoopTime)
                if isMiniGameWinActive then
                    wait(5)
                    enterMinigame("2021Avanza15CVT")
                    
                    -- Points Stats
                    points = points + 10
                    pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})  -- Update points display
                end
            end)
            
        else
            isMiniGameWinActive = false
            leaveMinigame("2021Avanza15CVT")
            -- Reset Character and leave the minigame
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Reset the character
            end

            -- Points Stats
            points = 0
            pointsLabel:Set({Title = "Points Received", Content = "Start Minigame Autofarm to display points"})
        end
    end
})

-- Lose Account Toggle
MinigamesTab:CreateToggle({
    Name = "Lose Account",
    CurrentValue = false,
    Flag = "LoseAccount",
    Callback = function(Value)
        local player = game.Players.LocalPlayer

        -- Function to enter the minigame
        local function enterMinigame(vehicle)
            buycar()
            local args = {
                [1] = "Enter",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
            local humanoid = player.Character:WaitForChild("Humanoid")

            -- Start jumping coroutine
            coroutine.wrap(function()
                while isMiniGameLoseActive do
                    humanoid.Jump = true
                    wait(1)
                end
            end)()
        end

        -- Function to leave the minigame
        local function leaveMinigame(vehicle)
            sellcar()
            local args = {
                [1] = "Leave",
                [2] = vehicle
            }
            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        end

        if Value then
            isMiniGameLoseActive = true
            optimizeON()
            enterMinigame("2021Avanza15CVT")

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                wait(pendingLoopTime)
                if isMiniGameLoseActive then
                    wait(5)
                    enterMinigame("2021Avanza15CVT")

                    -- Points Stats
                    points = points + 5
                    pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})  -- Update points display
                end
            end)
        else
            isMiniGameLoseActive = false
            leaveMinigame("2021Avanza15CVT")

            -- Reset Character and leave the minigame
            if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                player.Character:FindFirstChildOfClass("Humanoid").Health = 0 -- Reset the character
            end

            -- Points Stats
            pointsLabel:Set({Title = "Points Received", Content = "Start Minigame Autofarm to display points"})
        end
    end
})


-- Tab for Misc
local MiscTab = Window:CreateTab("Misc" , "shuffle") -- Title, Image

-- Section
local Section = MiscTab:CreateSection("Box")

-- Local's for Gacha
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")

-- Open Gacha UI
local Button = MiscTab:CreateButton({
    Name = "Open Gacha UI",
    Callback = function()
        fireproximityprompt(workspace.Etc.NPC.BOXSHOP.ProximityPrompt)
    end,
})

-- Section
local Section = MiscTab:CreateSection("Autogacha")

-- Auto Gacha Function
local disablegacha = false
local disablegacha1 = false

-- Minigame Gacha
local function startgacha()
    if disablegacha == false then
        while startgacha do
            local button = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

            if button then
                -- Instead of firing MouseButton1Click, directly trigger the action it performs:
                -- Simulate the button's action (for example, buying a Minigame Box)
                local actionArgs = {
                    [1] = "Buy",
                    [2] = "Minigame Box"
                }

                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
            end

            task.wait(.1)

            if disablegacha then
                break
            end
        end
    end
end

-- Limited Gacha
local function startgacha1()
    if disablegacha1 == false then
        while startgacha1 do
            local button = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

            if button then
                -- Instead of firing MouseButton1Click, directly trigger the action it performs:
                -- Simulate the button's action (for example, buying a Minigame Box)
                local actionArgs = {
                    [1] = "Buy",
                    [2] = "Limited Box"
                }

                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
            end

            task.wait(.1)

            if disablegacha1 then
                break
            end
        end
    end
end

-- Gamepass Gacha
local function startgacha2()
    if disablegacha1 == false then
        while startgacha2 do
            local button = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

            if button then
                -- Instead of firing MouseButton1Click, directly trigger the action it performs:
                -- Simulate the button's action (for example, buying a Minigame Box)
                local actionArgs = {
                    [1] = "Buy",
                    [2] = "Gamepass Box"
                }

                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
            end

            task.wait(.1)

            if disablegacha2 then
                break
            end
        end
    end
end

-- Auto Gacha Minigames Toggle
local Toggle = MiscTab:CreateToggle({
    Name = "AutoGacha Minigames",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            disablegacha = false
            startgacha()
        else
            disablegacha = true
        end
    end,
})

-- Auto Gacha Limited Toggle
local Toggle = MiscTab:CreateToggle({
    Name = "AutoGacha Limited Box",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            disablegacha1 = false
            startgacha1()
        else
            disablegacha1 = true
        end
    end,
})

-- Auto Gacha Gamepass Toggle
local Toggle = MiscTab:CreateToggle({
    Name = "AutoGacha Gamepass Box",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            disablegacha2 = false
            startgacha2()
        else
            disablegacha2 = true
        end
    end,
})

-- Section
local Section = MiscTab:CreateSection("Car Dealers")

-- Dealers
local Dropdown = MiscTab:CreateDropdown({
    Name = "Dropdown Example",
    Options = {"77", "Audi", "Bandung", "BMW", "Daihatsu", "Honda", "Hyundai", "KIA", "Komersial", "Lexus", "Mazda", "MercedezBenz", "Mitsubishi", "Nissan", "Otnas", "Premium", "Suzuki", "Toyota", "VW", "Wuling"},
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Options)
        -- Get the selected option (dealernames)
        local selectedDealer = Options[1]  -- Only one option is selected, so we get the first element
        local dealership = workspace.Etc.Dealership
        
        -- Verify if the selected dealer exists in the dealership folder (use 'FindFirstChild' for safety)
        local dealerFolder = dealership:FindFirstChild(selectedDealer)
        
        -- Check if the dealer exists and if it has a 'Prompt' property
        if dealerFolder and dealerFolder:FindFirstChild("Prompt") then
            -- Trigger the proximity prompt for the specific dealer
            fireproximityprompt(dealerFolder.Prompt)
        else
            Rayfield:Notify({
                Title = "Dealership",
                Content = "The Dealer u choose is not available or located in another province",
                Duration = 5,
                Image = "rewind",
            })
        end
    end,
})


-- Tab for Settings
local SettingsTab = Window:CreateTab("Settings" , "settings") -- Title, Image

-- Section
local Section = SettingsTab:CreateSection("Hub Enabled / Disabled")

-- Destroy Button
local Button = SettingsTab:CreateButton({
    Name = "Delete UI",
    Callback = function()
        local function disableloops()
            isMiniGameWinActive = false
            isMiniGameLoseActive = false
            disablegacha = true
            disablegacha1 = true
            disablegacha2 = true
            bugnotif = false
        end

        disableloops()
        Rayfield:Destroy()
    end,
})


-- Ensure UI persists on character reset
local ScreenGui = Window:GetGui()
ScreenGui.ResetOnSpawn = false
