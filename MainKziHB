-- Kezi Running Stats
    if KezLoaded then
        return
    end

    pcall(function() getgenv().KezLoaded = true end)

-- Rayfield UI Setup
    -- Anti-AFK Script
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        game:GetService("VirtualUser"):CaptureController()
        game:GetService("VirtualUser"):ClickButton2(Vector2.new())
    end)

    local CurrentVersion = ("1.2")
    local LocalPlayerName = game.Players.LocalPlayer.Name
    
    -- Rayfield Library Load
    local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

    -- UI Setup
    local Window = Rayfield:CreateWindow({
        Name = "Kezi HUB V " .. CurrentVersion .. " | @" .. LocalPlayerName,
        Icon = 0,
        LoadingTitle = "Kezi Hub",
        LoadingSubtitle = "by KezSoftworks",
        Theme = 'Amethyst',
        DisableRayfieldPrompts = true,
        DisableBuildWarnings = true,
    })

    -- Notification
    coroutine.wrap(function()
        while Window do
            Rayfield:Notify({
                Title = "Is there any bugs?",
                Content = "Consider reporting any bugs in KeziHub Discord Server",
                Duration = 6.5,
                Image = "rewind",
            })
            task.wait(90)
        end
    end)()


-- Tab for Stats
    -- Load StatsTab
    local StatsTab = Window:CreateTab("Stats")

    -- Points Stats Only Run at MAP
    coroutine.wrap(function()
        if game.PlaceId == 14005966837 or game.PlaceId == 9233343468 or game.PlaceId == 9508940498 then
            -- Minigames Info Section
            StatsTab:CreateSection("Minigames Stats")

            if game.PlaceId == 14005966837 then
                -- Minigame Countdown
                local CurrentCountdownLabel = StatsTab:CreateParagraph({
                    Title = "Minigame Countdown",
                    Content = "Minigame is Not Available"
                })

                -- Update Current Countdown
                coroutine.wrap(function()
                    while true do
                        local Countdown = game:GetService("Players").LocalPlayer.PlayerGui.Race.Container.Minigame.MainFrame.Status
                        local CountdownText = Countdown.Text
                        CurrentCountdownLabel:Set({Title = "Minigame Countdown", Content = tostring(CountdownText)})
                        task.wait(1)
                    end
                end)()
            end

            -- Current Points
            local CurrentpointsLabel = StatsTab:CreateParagraph({
                Title = "Current Points",
                Content = "Your Points will be displayed once you join any map"
            })

            -- Update Current Points
            coroutine.wrap(function()
                while true do
                    local PointLabelText = game:GetService("Players").LocalPlayer.PlayerGui.BoxShop.Container.Box.MinigamePoint
                    local CurrentPoints = PointLabelText.Text
                    CurrentpointsLabel:Set({Title = "Current Points", Content = tostring(CurrentPoints)})
                    task.wait(1)
                end
            end)()
        end
    end)()

    -- Currencies Info Section
    StatsTab:CreateSection("Currency Stats")

    -- Currencies Updater
    local MoneyUpdateLabel = StatsTab:CreateParagraph({
        Title = "Current Money",
        Content = "0"
    })

    coroutine.wrap(function()
        if game.PlaceId == 6911148748 then
            while true do
                local MoneyLabelText1 = game:GetService("Players").LocalPlayer.PlayerGui.Hub.Container.Window.Marketplace.CashFrame.TextLabel
                local CurrentMoney1 = MoneyLabelText1.Text
                MoneyUpdateLabel:Set({Title = "Current Money", Content = tostring(CurrentMoney1)})
                task.wait(1)
            end
        else
            while true do
                local MoneyLabelText2 = game:GetService("Players").LocalPlayer.PlayerGui.Main.Container.Hub.CashFrame.Frame.TextLabel
                local CurrentMoney2 = MoneyLabelText2.Text
                MoneyUpdateLabel:Set({Title = "Current Money", Content = tostring(CurrentMoney2)})
                task.wait(1)
            end
        end
    end)()


-- Tab for Minigames
if game.PlaceId == 14005966837 then
    -- Load Minigames Tab
    local MinigamesTab = Window:CreateTab("Minigames")

    -- Information
    MinigamesTab:CreateSection("Minigames Information")
    MinigamesTab:CreateParagraph({Title = "Required Information", Content = "Required 6 Instances to use this feature."})

    -- Buy AVANZA Function
    local function buycar()
        local args = {
            [1] = "Buy",
            [2] = "2021Avanza15CVT",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end

    -- Sell AVANZA Function
    local function sellcar()
        local args = {
            [1] = "Sell",
            [2] = "2021Avanza15CVT"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end    

    -- Minigames Config Section
    MinigamesTab:CreateSection("Minigames AutoFarm")

    -- Pending Loop Time
    local pendingLoopTime = 2
    local Input = MinigamesTab:CreateInput({
        Name = "Pending Loop Time",
        CurrentValue = tostring(pendingLoopTime),
        PlaceholderText = "Input Placeholder",
        RemoveTextAfterFocusLost = false,
        Flag = "Input PendingLoopTime",
        Callback = function(Text)
            local time = tonumber(Text)
            if time then
                pendingLoopTime = time
            else
                pendingLoopTime = 2
            end
        end,
    })

    -- Default Selected is Lose
    local optionWin = false
    local optionLose = true
    
    -- Win / Lose Selection
    local Selection = MinigamesTab:CreateDropdown({
        Name = "Select Win / Lose",
        Options = {"Win" , "Lose"},
        CurrentOption = "Lose",
        MultipleOptions = false,
        Flag = "",
        Callback = function(Options)
            local SelectedAcc = Options[1]

            if SelectedAcc == "Win" then
                optionWin = true
                optionLose = false
            elseif SelectedAcc == "Lose" then
                optionWin = false
                optionLose = true
            end
        end,
    })

    -- Start Minigame Toggle
    MinigamesTab:CreateToggle({
        Name = "Start Minigame",
        CurrentValue = false,
        Flag = "Toggle StartMinigame",
        Callback = function(Value)
            local MgValue = Value

            -- Turning off Rendering
            local function optimizeON()
                local objects = {
                    "Lampu Kota",
                    "LightingAmbientRevamp",
                    "Stuff",
                    "RoadLight"
                }
            
                for _, folderName in ipairs(objects) do
                    local folder = workspace:FindFirstChild(folderName)
                    local folder1 = workspace.Map:FindFirstChild(folderName)  -- Make sure folder1 is checked here
            
                    -- Destroy folder if it exists in either location
                    if folder then
                        folder:Destroy()
                    end
                    if folder1 then
                        folder1:Destroy()
                    end
                end
            end

            -- Tween Teleport to NPC
            local function TweenTeleporttoNPC()
                local TweenService = game:GetService("TweenService")
                local player = game.Players.LocalPlayer

                local targetPosition = CFrame.new(-4991.98242, 21.3338642, 887.75061, -0.999950171, 0, 0.0100132292, 0, 1, 0, -0.0100132292, 0, -0.999950171)

                local tweenInfo = TweenInfo.new(
                    5, -- Duration of the tween
                    Enum.EasingStyle.Linear, -- Easing style
                    Enum.EasingDirection.Out, -- Easing direction
                    0, -- Repeat count (0 means no repetition)
                    false, -- Should the tween reverse after it finishes?
                    0 -- Delay before starting the tween
                )

                local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

                tween:Play()
            end

            -- Function to enter the minigame
            local function enterMinigame(vehicle)

                local args = {
                    [1] = "Enter",
                    [2] = vehicle
                }
                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
            end

            -- Function to leave the minigame
            local function leaveMinigame(vehicle)
                local args = {
                    [1] = "Leave",
                    [2] = vehicle
                }
                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
                
                sellcar()
            end

            local function Jump()
                coroutine.wrap(function()
                    -- Exit Car at Minigame
                    while isMiniGameLoseActive do
                        local player = game.Players.LocalPlayer
                        local vehicleName = player.Name .. "sCar"
                        local vehicleFolder = workspace.Vehicles
                        local vehicle = vehicleFolder:FindFirstChild(vehicleName)
            
                        while not vehicle do
                            task.wait(1)
                            vehicle = vehicleFolder:FindFirstChild(vehicleName)
                        end
            
                        local character = player.Character or player.CharacterAdded:Wait()
                        local humanoid = character:WaitForChild("Humanoid")
            
                        while vehicle and vehicle.Parent do
                            humanoid.Jump = true
                            wait(0.5)
                        end
                    end
                end)()
            end

            -- Minigame AutoFarm Callback
            if MgValue == true then
                optimizeON()
                buycar()
                TweenTeleporttoNPC()
                task.wait(.1)
                enterMinigame("2021Avanza15CVT")

                if optionWin then
                    isMiniGameWinActive = true
                    isMiniGameLoseActive = false

                    -- Detect when the character resets
                    local player = game.Players.LocalPlayer
                    player.CharacterAdded:Connect(function()
                        task.wait(pendingLoopTime)
                        if isMiniGameWinActive then
                            enterMinigame("2021Avanza15CVT")
                        end
                    end)

                elseif optionLose then
                    isMiniGameLoseActive = true
                    isMiniGameWinActive = false
                    
                    Jump()

                    -- Detect when the character resets
                    local player = game.Players.LocalPlayer
                    player.CharacterAdded:Connect(function()
                        task.wait(pendingLoopTime)
                        if isMiniGameLoseActive then
                            enterMinigame("2021Avanza15CVT")
                            Jump()
                        end
                    end)
                end
            else
                leaveMinigame("2021Avanza15CVT")

                -- Stop the minigame and reset variables if the toggle is turned off
                coroutine.wrap(function()
                    isMiniGameWinActive = false
                    isMiniGameLoseActive = false

                    -- Notify
                    Rayfield:Notify({
                        Title = "Minigames AutoFarm",
                        Content = "Minigames AutoFarm is Disabled",
                        Duration = 5,
                        Image = "rewind",
                    })
                end)()

                -- Reset Character and leave the minigame
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoid = character:WaitForChild("Humanoid")

                if humanoid then
                    player.Character:FindFirstChildOfClass("Humanoid").Health = 0
                end
            end
        end,
    })

    -- Minigames Settings Section
    MinigamesTab:CreateSection("Minigames Settings")

    local ARwBug = true

    -- Auto Rejoin when Bug Toggle
    MinigamesTab:CreateToggle({
        Name = "Auto Rejoin when Bug",
        CurrentValue = true,
        Flag = "Toggle AutoRejoinWhenBug",
        Callback = function(AutoRejoinWhenBug)
            ARwBug = AutoRejoinWhenBug
        end,
    })

    -- Auto Rejoin when Bug
    local function AutoRejoinWhenBug()
        local blackoutDuration = 0
        local maxDuration = 300 
        local blackoutGui = game:GetService("StarterGui").Minigame.Main.BlackOut
        
        if ARwBug then
            if not game.PlaceId == 6911148748 then
                if blackoutGui.Visible then
                    local startTime = tick()
                    
                    -- Keep checking for the blackout duration
                    while blackoutGui.Visible do
                        blackoutDuration = tick() - startTime
                        
                        if blackoutDuration >= maxDuration then
                            -- Disable Auto Execute
                            reExecuteScript = false

                            -- AutoRejoin Variables
                            local Players = game:GetService("Players")
                            local TeleportService = game:GetService("TeleportService")
                            
                            -- Executor's Support
                            queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
                            httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
                
                            -- Store current PlaceId and JobId
                            local PlaceId, JobId = game.PlaceId, game.JobId

                            Players.LocalPlayer.OnTeleport:Connect(function(State)
                                if queueteleport then
                                    -- Queue the PrivateServer join and script execution
                                    queueteleport([[
                                        loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueTpp'))()
                                        local args = {
                                            [1] = "Join",
                                            [2] = "ed9467545845660",  -- The private server ID
                                            [3] = "Jakarta"
                                        }
                                        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                                    ]])
                                end
                            end)
                        end
            
                        task.wait(5)  -- Check every second
                    end
                end
            end
        end
    end

    if not game.PlaceId == 6911148748 and ARwBug then
        AutoRejoinWhenBug()
    end


    local AntiValue = true
    -- Anti Staff
    MinigamesTab:CreateToggle({
        Name = "Anti Staff",
        CurrentValue = true,
        Flag = "Toggle AntiStaff",
        Callback = function(AntiStaffValue)
            AntiValue = AntiStaffValue
        end,
    })
    
    local function antiStaff()
        if not game.PlaceId == 6911148748 then
            coroutine.wrap(function()
                local DevRank = {
                    "Developer",
                    "HeadDeveloper",
                    "OCDID",
                    "Owner",
                    "Staff"
                }
            
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Players = game:GetService("Players")
            
                for _, rankName in ipairs(DevRank) do
                    local folder = ReplicatedStorage.Rank:FindFirstChild(rankName)
                    
                    if folder then
                        for _, child in ipairs(folder:GetChildren()) do
                            if child:IsA("IntValue") then
                                local staffUserId = tonumber(child.Name)
            
                                if staffUserId then
                                    for _, player in ipairs(Players:GetPlayers()) do
                                        if player.UserId == staffUserId then
                                            game.Players.LocalPlayer:Kick("Staff Detected | KeziHub Security Notification")
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)()
        end
    end

    -- Run AntiStaff Function
    if AntiValue then
        print("AntiStaff Executed, you are protected by KeziHub")
        coroutine.wrap(function()
            while Value do
                antiStaff()
                task.wait(5)
            end
        end)()
    else
        coroutine.wrap(function()
            Rayfield:Notify({
                Title = "Anti Staff",
                Content = "Anti Staff is Disabled, you are not protected by KeziHub",
                Duration = 5,
                Image = "rewind",
            })
        end)()
    end
end

-- Tab for Ramadhan Event
if game.PlaceId == 118108582994420 then
    -- Ramadhan Event Tab
    local RamadhanEventTab = Window:CreateTab("Ramadhan Event")

    -- Variables
    local TeleportTask1 = false
    local TeleportTask2 = false
    local TeleportTask3 = false
    local TeleportTask4 = false
    local TeleportTask5 = false


    -- Teleport to Julmann
    local function TeleporttoJulmann()
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer

        local targetPosition = CFrame.new(-559.853821, 3.87011909, 1443.06836, -0.983128548, 0, 0.182916805, 0, 1, 0, -0.182916805, 0, -0.983128548)

        local tweenInfo = TweenInfo.new(
            15, -- Duration of the tween
            Enum.EasingStyle.Linear, -- Easing style
            Enum.EasingDirection.Out, -- Easing direction
            0, -- Repeat count (0 means no repetition)
            false, -- Should the tween reverse after it finishes?
            0 -- Delay before starting the tween
        )

        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

        tween:Play()
    end

    -- Teleport to Task 1
    local function TeleporttoTask1()
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer

        local targetPosition = CFrame.new(-271.393066, 3.85742378, 3735.33911, -0.975525856, 0, -0.219885468, 0, 1, 0, 0.219885468, 0, -0.975525856)

        local tweenInfo = TweenInfo.new(
            15, -- Duration of the tween
            Enum.EasingStyle.Linear, -- Easing style
            Enum.EasingDirection.Out, -- Easing direction
            0, -- Repeat count (0 means no repetition)
            false, -- Should the tween reverse after it finishes?
            0 -- Delay before starting the tween
        )

        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

        tween:Play()
    end

    -- Teleport to Task 2
    local function TeleporttoTask2()
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer

        local targetPosition = CFrame.new(-2415.18237, 4.87500238, 1178.04211, -0.274856925, 0, 0.961485207, 0, 1, 0, -0.961485207, 0, -0.274856925)

        local tweenInfo = TweenInfo.new(
            20, -- Duration of the tween
            Enum.EasingStyle.Linear, -- Easing style
            Enum.EasingDirection.Out, -- Easing direction
            0, -- Repeat count (0 means no repetition)
            false, -- Should the tween reverse after it finishes?
            0 -- Delay before starting the tween
        )

        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

        tween:Play()
    end

    -- Teleport to Task 3
    local function TeleporttoTask3()
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer

        local targetPosition = CFrame.new(-3186.85718, 3.71099949, 2048.15723, 0.925189435, 0, 0.379505634, 0, 1, 0, -0.379505634, 0, 0.925189435)

        local tweenInfo = TweenInfo.new(
            20, -- Duration of the tween
            Enum.EasingStyle.Linear, -- Easing style
            Enum.EasingDirection.Out, -- Easing direction
            0, -- Repeat count (0 means no repetition)
            false, -- Should the tween reverse after it finishes?
            0 -- Delay before starting the tween
        )

        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

        tween:Play()
    end

    -- Teleport to Task 4
    local function TeleporttoTask4()
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer

        local targetPosition = CFrame.new(-416.353088, 3.86724663, -79.2402039, 0.264528692, 0, 0.96437782, 0, 1, 0, -0.96437782, 0, 0.264528692)

        local tweenInfo = TweenInfo.new(
            20, -- Duration of the tween
            Enum.EasingStyle.Linear, -- Easing style
            Enum.EasingDirection.Out, -- Easing direction
            0, -- Repeat count (0 means no repetition)
            false, -- Should the tween reverse after it finishes?
            0 -- Delay before starting the tween
        )

        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

        tween:Play()
    end

    -- Teleport to Task 5
    local function TeleporttoTask5()
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer

        local targetPosition = CFrame.new(4581.25, 4.07422066, 460.780365, -0.992079973, 0, 0.125608042, 0, 1, 0, -0.125608042, 0, -0.992079973)

        local tweenInfo = TweenInfo.new(
            20, -- Duration of the tween
            Enum.EasingStyle.Linear, -- Easing style
            Enum.EasingDirection.Out, -- Easing direction
            0, -- Repeat count (0 means no repetition)
            false, -- Should the tween reverse after it finishes?
            0 -- Delay before starting the tween
        )

        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

        tween:Play()
    end

    -- Parkour Teleport
    local function ParkourTeleport()
        local TweenService = game:GetService("TweenService")
        local player = game.Players.LocalPlayer

        local targetPosition = CFrame.new(-4.62478638, 29038.0488, -304.56897, 1, 0, 0, 0, 1, 0, 0, 0, 1)

        local tweenInfo = TweenInfo.new(
            8, -- Duration of the tween
            Enum.EasingStyle.Linear, -- Easing style
            Enum.EasingDirection.Out, -- Easing direction
            0, -- Repeat count (0 means no repetition)
            false, -- Should the tween reverse after it finishes?
            0 -- Delay before starting the tween
        )

        local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

        tween:Play()
    end

    -- Start Event Section
    RamadhanEventTab:CreateSection("Start Event")
    
    -- Button to Start Event
    RamadhanEventTab:CreateButton({
        Name = "Start Event",
        Callback = function()
            TeleporttoJulmann()
        end,
    })

    -- Select Task Section
    RamadhanEventTab:CreateSection("Select Task")

    -- Dropdown for Teleportation
    RamadhanEventTab:CreateDropdown({
        Name = "Select Teleportation",
        Options = {"Task 1","Task 2","Task 3","Task 4","Task 5"},
        CurrentOption = {"None"},
        MultipleOptions = false,
        Flag = nil
        Callback = function(Options)
            local SelectedTeleport = Options[1]

            if SelectedTeleport == "Task 1" then
                TeleportTask1 = true
                TeleportTask2 = false
                TeleportTask3 = false
                TeleportTask4 = false
                TeleportTask5 = false
            elseif SelectedTeleport == "Task 2" then
                TeleportTask1 = false
                TeleportTask2 = true
                TeleportTask3 = false
                TeleportTask4 = false
                TeleportTask5 = false
            elseif SelectedTeleport == "Task 3" then
                TeleportTask1 = false
                TeleportTask2 = false
                TeleportTask3 = true
                TeleportTask4 = false
                TeleportTask5 = false
            elseif SelectedTeleport == "Task 4" then
                TeleportTask1 = false
                TeleportTask2 = false
                TeleportTask3 = false
                TeleportTask4 = true
                TeleportTask5 = false
            elseif SelectedTeleport == "Task 5" then
                TeleportTask1 = false
                TeleportTask2 = false
                TeleportTask3 = false
                TeleportTask4 = false
                TeleportTask5 = true
            end
        end,
    })

    -- Teleport to Task Button
    RamadhanEventTab:CreateButton({
        Name = "Task Teleport",
        Callback = function()
            if TeleportTask1 then
                TeleporttoTask1()
            elseif TeleportTask2 then
                TeleporttoTask2()
            elseif TeleportTask3 then
                TeleporttoTask3()
            elseif TeleportTask4 then
                TeleporttoTask4()
            elseif TeleportTask5 then
                TeleporttoTask5()
            end
        end,
    })

    -- Parkour Info Section
    RamadhanEventTab:CreateSection("Teleport Parkour")

    -- Button Parkour Teleport
    RamadhanEventTab:CreateButton({
        Name = "Parkour Teleport",
        Callback = function()
            ParkourTeleport()
        end,
    })
end

-- Tab for Event
if game.PlaceId == 9233343468 then
    -- Load Event Tab
    local EventTab = Window:CreateTab("Event")

    -- Event Info
    EventTab:CreateSection("Event CNY 2025")

    -- Load AutoCollect Button
    EventTab:CreateToggle({
        Name = "Auto Collect Daily Task",
        CurrentValue = false,
        Flag = "Toggle1", 
        Callback = function(Value)
            local EventValue = Value
        
            if EventValue then
                -- General Variables
                local Angpao = workspace.Event.Client.Angpao
                local Snake = workspace.Event.Client.Snake

                -- Objects Table (item names)
                local objects = {
                    "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"
                }

                -- Tween Teleport Function
                local function TeleporttoItem(targetPosition)
                    local TweenService = game:GetService("TweenService")
                    local player = game.Players.LocalPlayer

                    local tweenInfo = TweenInfo.new(
                        5, -- Duration of the tween
                        Enum.EasingStyle.Linear, -- Easing style
                        Enum.EasingDirection.Out, -- Easing direction
                        0, -- Repeat count
                        false, -- Should the tween reverse after it finishes?
                        0 -- Delay before starting the tween
                    )

                    local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})

                    tween:Play()
                end

                -- Main loop
                while EventValue do
                    if not EventValue then
                        break
                    end
                    
                    for _, objectName in ipairs(objects) do
                        local item = Angpao:FindFirstChild(objectName) or Snake:FindFirstChild(objectName)
                        
                        if item then
                            local itemLocation = item.CFrame
                            local prompt = item:FindFirstChild("ProximityPrompt")
                            
                            if prompt then
                                -- Teleport to item
                                TeleporttoItem(itemLocation)
                                task.wait(5)

                                -- Fire proximity prompt
                                fireproximityprompt(prompt)
                                task.wait(10)
                            end
                        end
                    end
                    task.wait(1)
                end
            else
                -- Reset Character
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoid = character:WaitForChild("Humanoid")

                if humanoid then
                    player.Character:FindFirstChildOfClass("Humanoid").Health = 0
                end
            end
        end,
    })

    -- Load TeleporttoDaoza Button
    EventTab:CreateButton({
        Name = "Teleport to Claim Reward",
        Callback = function()
            -- Tween Teleport to Claim Reward
            local TweenService = game:GetService("TweenService")
            local player = game.Players.LocalPlayer
            local ClaimNPC = workspace.Event.NPC.DA0ZA
            local Prompt = ClaimNPC.ProximityPrompt

            local targetPosition = ClaimNPC.WorldPivot

            local tweenInfo = TweenInfo.new(
                5, -- Duration of the tween
                Enum.EasingStyle.Linear, -- Easing style
                Enum.EasingDirection.Out, -- Easing direction
                0, -- Repeat count (0 means no repetition)
                false, -- Should the tween reverse after it finishes?
                0 -- Delay before starting the tween
            )

            local tween = TweenService:Create(player.Character.HumanoidRootPart, tweenInfo, {CFrame = targetPosition})
            tween:Play()
            task.wait(5)

            if Prompt then
                fireproximityprompt(Prompt)
                task.wait(2)
            end
        end,
    })
end



-- Tab for Misc
if game.PlaceId == 14005966837 or game.PlaceId == 9233343468 or game.PlaceId == 9508940498 then
    -- Load MiscTab
    local MiscTab = Window:CreateTab("Misc")

    -- Box Section
    MiscTab:CreateSection("Box")

    -- Local's for Gacha
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local StarterGui = game:GetService("StarterGui")

    -- Open Gacha UI
    MiscTab:CreateButton({
        Name = "Open Gacha UI",
        Callback = function()
            fireproximityprompt(workspace.Etc.NPC.BOXSHOP.ProximityPrompt)
        end,
    })

    -- Auto Gacha Section
    local Section = MiscTab:CreateSection("Autogacha")

    -- Auto Gacha Function
    local allgacha = true
    local disablegacha1 = false
    local disablegacha2 = false
    local disablegacha3 = false

    -- Minigame Gacha
    local function startgacha1()
        if disablegacha1 == false and allgacha then
            while startgacha1 do
                local button1 = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

                if button1 then
                    local actionArgs = {
                        [1] = "Buy",
                        [2] = "Minigame Box"
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
                end

                task.wait(.5)
                allgacha = true
                if disablegacha1 then
                    break
                end
            end
        end
    end

    -- Limited Gacha
    local function startgacha2()
        if disablegacha2 == false and allgacha then
            while startgacha2 do
                local button2 = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

                if button2 then
                    local actionArgs = {
                        [1] = "Buy",
                        [2] = "Limited Box"
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
                end

                task.wait(.5)
                if disablegacha2 then
                    break
                end
            end
        end
    end

    -- Gamepass Gacha
    local function startgacha2()
        if disablegacha3 == false and allgacha then
            while startgacha3 do
                local button3 = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

                if button3 then
                    local actionArgs = {
                        [1] = "Buy",
                        [2] = "Gamepass Box"
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
                end

                task.wait(.1)

                if disablegacha3 then
                    break
                end
            end
        end
    end

    -- Auto Gacha Minigames Toggle
    MiscTab:CreateToggle({
        Name = "AutoGacha Minigames",
        CurrentValue = false,
        Flag = "",
        Callback = function(MgGchaValue)
            local MinigameGacha = MgGchaValue

            if MgGchaValue then
                disablegacha1 = false
                startgacha1()
            else
                disablegacha1 = true
            end
        end,
    })

    -- Auto Gacha Limited Toggle
    MiscTab:CreateToggle({
        Name = "AutoGacha Limited Box",
        CurrentValue = false,
        Flag = "",
        Callback = function(LmiGchaValue)
            local LimitedGacha = LmiGchaValue

            if LmiGchaValue then
                disablegacha2 = false
                startgacha2()
            else
                disablegacha2 = true
            end
        end,
    })

    -- Auto Gacha Gamepass Toggle
    MiscTab:CreateToggle({
        Name = "AutoGacha Gamepass Box",
        CurrentValue = false,
        Flag = "",
        Callback = function(GpGchaValue)
            local GamepassGacha = GpGchaValue

            if GpGchaValue then
                disablegacha3 = false
                startgacha3()
            else
                disablegacha3 = true
            end
        end,
    })

    -- Dealers Section
    MiscTab:CreateSection("Car Dealers")

    -- Dealers
    local Options = false
    MiscTab:CreateDropdown({
        Name = "Open Dealers",
        Options = {"77", "Audi", "Bandung", "BMW", "Daihatsu", "Honda", "Hyundai", "KIA", "Komersial", "Lexus", "Mazda", "MercedesBenz", "Mitsubishi", "Nissan", "Otnas", "Premium", "Suzuki", "Toyota", "VW", "Wuling"},
        CurrentOption = {""},
        MultipleOptions = false,
        Flag = "",
        Callback = function(Options)
            local selectedDealer = Options[1]
            local dealership = workspace.Etc.Dealership
            
            local dealerFolder = dealership:FindFirstChild(selectedDealer)
            
            if dealership and dealerFolder and dealerFolder:FindFirstChild("Prompt") then
                fireproximityprompt(dealerFolder.Prompt)
            else
                Rayfield:Notify({
                    Title = "Dealership",
                    Content = "The Dealer u choose is not available or located in another province",
                    Duration = 5,
                    Image = "rewind",
                })
            end
        end,
    })
end


-- Tab for Settings
    -- Load SettingsTab
    local SettingsTab = Window:CreateTab("Settings")

    -- Auto Rejoiner Section
    SettingsTab:CreateSection("Auto Rejoiner")

    -- Map Variables
    local alrSelectMap = false
    local SelectJakarta = false
    local SelectJawaBarat = false
    local SelectJawaTengah = false

    -- Default Jakarta
    if SelectJakarta == false then
        SelectJakarta = true
        SelectJawaBarat = false
        SelectJawaTengah = false
        alrSelectMap = true
    end

    -- Map Selection
    SettingsTab:CreateDropdown({
        Name = "Select Map",
        Options = {"Jakarta","JawaBarat","JawaTengah"},
        CurrentOption = {"Jakarta"},
        MultipleOptions = false,
        Flag = "Dropdown SelectMap",
        Callback = function(Options)
            local selectedMap = Options[1]

            if selectedMap == "Jakarta" then
                SelectJakarta = true
                SelectJawaBarat = false
                SelectJawaTengah = false
            
            elseif selectedMap == "JawaBarat" then
                SelectJakarta = false
                SelectJawaBarat = true
                SelectJawaTengah = false
            
            elseif selectedMap == "JawaTengah" then
                SelectJakarta = false
                SelectJawaBarat = false
                SelectJawaTengah = true
            end
        end,
    })

    -- Server Selection Variables
    local SelectedServer = "Server RaraSpecialistRBB"
    local ServerCode = "3fc4f7545845660"

    -- Server Selection
    SettingsTab:CreateDropdown({
        Name = "Select Server",
        Options = {"Server RaraSpecialistRBB","Server ElzioLiatMamah"},
        CurrentOption = {"Server RaraSpecialistRBB"},
        MultipleOptions = false,
        Callback = function(Options)
            local SelectedServer = Options[1]

            if SelectedServer == "Server RaraSpecialistRBB" then
                ServerCode = "3fc4f7545845660"
            else
                ServerCode = "8b1dd7654135844"
            end
        end,
    })

    -- Rejoin Button
    SettingsTab:CreateButton({
        Name = "Rejoin Private Server",
        Callback = function()
            local Players = game:GetService("Players")
            local TeleportService = game:GetService("TeleportService")
            
            -- Executor's Support
            queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
            httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

            -- Store current PlaceId and JobId
            local PlaceId, JobId = game.PlaceId, game.JobId

            -- Map Table
            local TeleportCheck1 = false
            if SelectJakarta and not TeleportCheck1 then
                alrSelectMap = true
                TeleportCheck1 = true
                TeleportCheck2 = false
                TeleportCheck3 = false
                Players.LocalPlayer.OnTeleport:Connect(function(State)
                    if queueteleport then
                        -- Queue the PrivateServer join and script execution
                        queueteleport([[
                            loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueT7'))()
                            print("Waiting for Teleportation")
                            local args = {
                                [1] = "Join",
                                [2] = "3fc4f7545845660",  -- The private server ID
                                [3] = "Jakarta"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                        ]])
                    end
                end)

            local TeleportCheck2 = false
            elseif SelectJawaBarat and not TeleportCheck2 then
                alrSelectMap = true
                TeleportCheck1 = false
                TeleportCheck2 = true
                TeleportCheck3 = false
                Players.LocalPlayer.OnTeleport:Connect(function(State)
                    if queueteleport then
                        -- Queue the PrivateServer join and script execution
                        queueteleport([[
                            loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueT7'))()
                            print("Waiting for Teleportation")
                            local args = {
                                [1] = "Join",
                                [2] = "3fc4f7545845660",  -- The private server ID
                                [3] = "JawaBarat"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                            
                        ]])
                    end
                end)

            local TeleportCheck3 = false
            elseif SelectJawaTengah and not TeleportCheck3 then
                alrSelectMap = true
                TeleportCheck1 = false
                TeleportCheck2 = false
                TeleportCheck3 = true
                Players.LocalPlayer.OnTeleport:Connect(function(State)
                    if queueteleport then
                        -- Queue the PrivateServer join and script execution
                        queueteleport([[
                            loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueT7'))()
                            print("Waiting for Teleportation")
                            local args = {
                                [1] = "Join",
                                [2] = "3fc4f7545845660",  -- The private server ID
                                [3] = "JawaTengah"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                        ]])
                    end
                end)
            end
            
            local TpOption = nil
            if TeleportCheck1 then
                TpOption = "Jakarta"
            elseif TeleportCheck2 then
                TpOption = "JawaBarat"
            elseif TeleportCheck3 then
                TpOption = "JawaTengah"
            else
                coroutine.wrap(function()
                    Rayfield:Notify({
                        Title = "Rejoiner",
                        Content = "Map is Not Selected",
                        Duration = 3,
                        Image = "rewind",
                    })
                end)()
                return
            end

            local province = TpOption
            local function joinmapwithoutMainmenu()
                local args = {
                    [1] = "Join",
                    [2] = ServerCode,
                    [3] = province
                }
                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
            end

            if alrSelectMap then
                if game.PlaceId == 6911148748 then
                    joinmapwithoutMainmenu()
                else
                    queueteleport1 = nil
                    TeleportService:Teleport(6911148748)
                end
            else
                coroutine.wrap(function()
                    Rayfield:Notify({
                        Title = "Auto Rejoiner",
                        Content = "Select Map before Auto Rejoin",
                        Duration = 3,
                        Image = "rewind",
                    })
                end)()
                return
            end
        end,
    })

    -- Delete UI Section
    SettingsTab:CreateSection("Disable Hub")

    -- Disable All Loops
    local function disableloops()
        -- Minigame OFF
        MgValue = false
        -- All Gacha OFF
        allgacha = false
        -- Anti Bug OFF
        ARwBug = false
        -- Anti Staff OFF
        AntiValue = false
        -- Teleport True OFF
        TeleportCheck = false
        queueteleport1 = nil
    end

    -- Destroy Button
    SettingsTab:CreateButton({
        Name = "Disable Script",
        Callback = function()
            Rayfield:Notify({
                Title = "Disable Script",
                Content = "Thank you for using Kezi Hub",
                Duration = 0.5,
                Image = "rewind",
            })

            pcall(function() getgenv().KezLoaded = false end)
            disableloops()
            task.wait(1)
            Rayfield:Destroy()
        end,
    })

-- Re-ExecuteScriptWhenTeleport
    local Players = game:GetService("Players")
    local TeleportService = game:GetService("TeleportService")
    
    -- Executor's Support
    queueteleport1 = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
    httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

    -- Store current PlaceId and JobId
    local PlaceId, JobId = game.PlaceId, game.JobId

    -- Connecting to the OnTeleport event
    if not TeleportCheck then
        Players.LocalPlayer.OnTeleport:Connect(function(State)
            if queueteleport1 then
                TeleportCheck = true
                -- Primary Script
                queueteleport1([[
                    loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/MainKziHB'))()
                    warn("KeziHub Auto Executed | Kezi Softworks")
                    print("Thank you for using Kezi Hub")
                ]])
            end
        end)
    end

-- Disable UI Reset
    local ScreenGui = Window
    ScreenGui.ResetOnSpawn = false
