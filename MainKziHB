-- Tab for Minigames
    -- Load Minigames Tab
    local MinigamesTab = Window:CreateTab("Minigames")

    -- Information
    MinigamesTab:CreateSection("Minigames Information")
    MinigamesTab:CreateParagraph({Title = "Required Information", Content = "Required 6 Instances to use this feature."})

    -- Buy AVANZA Function
    local function buycar()
        local args = {
            [1] = "Buy",
            [2] = "2021Avanza15CVT",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end

    -- Sell AVANZA Function
    local function sellcar()
        local args = {
            [1] = "Sell",
            [2] = "2021Avanza15CVT"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end    

    -- Minigames Config Section
    MinigamesTab:CreateSection("Minigames AutoFarm")

    -- Pending Loop Time
    local pendingLoopTime = 2
    local Input = MinigamesTab:CreateInput({
        Name = "Pending Loop Time",
        CurrentValue = tostring(pendingLoopTime),
        PlaceholderText = "Input Placeholder",
        RemoveTextAfterFocusLost = false,
        Flag = "Input PendingLoopTime",
        Callback = function(Text)
            local time = tonumber(Text)
            if time then
                pendingLoopTime = time
            else
                pendingLoopTime = 2
            end
        end,
    })

    -- Default Selected is Lose
    local optionWin = false
    local optionLose = true
    
    -- Win / Lose Selection
    local Selection = MinigamesTab:CreateDropdown({
        Name = "Select Win / Lose",
        Options = {"Win" , "Lose"},
        CurrentOption = "Lose",
        MultipleOptions = false,
        Flag = "",
        Callback = function(Options)
            local SelectedAcc = Options[1]

            if SelectedAcc == "Win" then
                optionWin = true
                optionLose = false
            elseif SelectedAcc == "Lose" then
                optionWin = false
                optionLose = true
            end
        end,
    })

    -- Start Minigame Toggle
    MinigamesTab:CreateToggle({
        Name = "Start Minigame",
        CurrentValue = false,
        Flag = "Toggle StartMinigame",
        Callback = function(Value)
            local MgValue = Value
        end,
    })

    -- Turning off Rendering
    local function optimizeON()
        local objects = {
            "Lampu Kota",
            "LightingAmbientRevamp",
            "Stuff",
            "RoadLight"
        }
    
        for _, folderName in ipairs(objects) do
            local folder = workspace:FindFirstChild(folderName)
            local folder1 = workspace.Map:FindFirstChild(folderName)  -- Make sure folder1 is checked here
    
            -- Destroy folder if it exists in either location
            if folder then
                folder:Destroy()
            end
            if folder1 then
                folder1:Destroy()
            end
        end
    end

    -- Delete Fence
    local Fence = workspace.Map.Prop:GetChildren()[16]
    if Fence then 
        Fence:Destroy()
    end

    -- Delete Building
    local NpcBuilding = workspace.Map.Building["building 1"]
    if NpcBuilding then
        NpcBuilding:Destroy()
    end

    -- Go To NPC
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local npc = workspace.Etc.NPC.Minigame

    local npcPivot = npc.WorldPivot
    local duration = 10
    local freezeDuration = 2

    local function flyToNpcPivot()
        local npctravel = false
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local distance = (npcPivot.Position - hrp.Position).Magnitude
        local requiredVelocity = (npcPivot.Position - hrp.Position).unit * (distance / duration)

        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(100000, 100000, 100000)
        bodyVelocity.Velocity = requiredVelocity
        bodyVelocity.Parent = hrp

        local runService = game:GetService("RunService")
        runService.Heartbeat:Connect(function()
            if (hrp.Position - npcPivot.Position).Magnitude < 5 then
                bodyVelocity:Destroy()

                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 0
                    humanoid.PlatformStand = true
                end
                wait(freezeDuration)

                if humanoid then
                    humanoid.WalkSpeed = 16
                    humanoid.PlatformStand = false
                end

            else
                local newVelocity = (npcPivot.Position - hrp.Position).unit * (distance / duration)
                bodyVelocity.Velocity = newVelocity
            end
        end)
    end

    -- Function to enter the minigame
    local function enterMinigame(vehicle)

        local args = {
            [1] = "Enter",
            [2] = vehicle
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
    end

    -- Function to leave the minigame
    local function leaveMinigame(vehicle)
        local args = {
            [1] = "Leave",
            [2] = vehicle
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
        
        sellcar()
    end

    local function Jump()
        coroutine.wrap(function()
            -- Exit Car at Minigame
            while isMiniGameLoseActive do
                local player = game.Players.LocalPlayer
                local vehicleName = player.Name .. "sCar"
                local vehicleFolder = workspace.Vehicles
                local vehicle = vehicleFolder:FindFirstChild(vehicleName)
    
                while not vehicle do
                    task.wait(1)
                    vehicle = vehicleFolder:FindFirstChild(vehicleName)
                end
    
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoid = character:WaitForChild("Humanoid")
    
                while vehicle and vehicle.Parent do
                    humanoid.Jump = true
                    wait(0.5)
                end
            end
        end)()
    end

    -- Minigame AutoFarm Callback
    if MgValue == true then
        buycar()
        flyToNpcPivot()
        optimizeON()
        task.wait(10)
        enterMinigame("2021Avanza15CVT")

        if optionWin then
            isMiniGameWinActive = true
            isMiniGameLoseActive = false

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                task.wait(pendingLoopTime)
                if isMiniGameWinActive then
                    coroutine.wrap(function()
                        -- Points Stats
                        points = points + 10
                        pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})
                    end)()

                    enterMinigame("2021Avanza15CVT")
                end
            end)

        elseif optionLose then
            isMiniGameLoseActive = true
            isMiniGameWinActive = false
            
            Jump()

            -- Detect when the character resets
            player.CharacterAdded:Connect(function()
                task.wait(pendingLoopTime)
                if isMiniGameLoseActive then
                    coroutine.wrap(function()
                        -- Points Stats
                        points = points + 5
                        pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})
                    end)()
                    
                    enterMinigame("2021Avanza15CVT")
                    Jump()
                end
            end)
        end
    else
        leaveMinigame("2021Avanza15CVT")

        -- Stop the minigame and reset variables if the toggle is turned off
        coroutine.wrap(function()
            isMiniGameWinActive = false
            isMiniGameLoseActive = false
            
            -- Points Stats
            points = 0
            pointsLabel:Set({Title = "Points Received", Content = "Start Minigame Autofarm to display points"})
            
            -- Notify
            Rayfield:Notify({
                Title = "Minigames AutoFarm",
                Content = "Minigames AutoFarm is Disabled",
                Duration = 5,
                Image = "rewind",
            })
        end)()

        -- Reset Character and leave the minigame
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid").Health = 0
        end
    end


    -- Minigames Settings Section
    MinigamesTab:CreateSection("Minigames Settings")

    local ARwBug = true

    -- Auto Rejoin when Bug Toggle
    MinigamesTab:CreateToggle({
        Name = "Auto Rejoin when Bug",
        CurrentValue = true,
        Flag = "Toggle AutoRejoinWhenBug",
        Callback = function(AutoRejoinWhenBug)
            ARwBug = AutoRejoinWhenBug
        end,
    })

    -- Auto Rejoin when Bug
    local function AutoRejoinWhenBug()
        local blackoutDuration = 0
        local maxDuration = 300 
        local blackoutGui = game:GetService("StarterGui").Minigame.Main.BlackOut
        
        if ARwBug then
            if not game.PlaceId == 6911148748 then
                if blackoutGui.Visible then
                    local startTime = tick()
                    
                    -- Keep checking for the blackout duration
                    while blackoutGui.Visible do
                        blackoutDuration = tick() - startTime
                        
                        if blackoutDuration >= maxDuration then
                            -- Disable Auto Execute
                            reExecuteScript = false

                            -- AutoRejoin Variables
                            local Players = game:GetService("Players")
                            local TeleportService = game:GetService("TeleportService")
                            
                            -- Executor's Support
                            queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
                            httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
                
                            -- Store current PlaceId and JobId
                            local PlaceId, JobId = game.PlaceId, game.JobId

                            Players.LocalPlayer.OnTeleport:Connect(function(State)
                                if queueteleport then
                                    -- Queue the PrivateServer join and script execution
                                    queueteleport([[
                                        loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueTpp'))()
                                        local args = {
                                            [1] = "Join",
                                            [2] = "ed9467545845660",  -- The private server ID
                                            [3] = "Jakarta"
                                        }
                                        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                                    ]])
                                end
                            end)
                        end
            
                        task.wait(5)  -- Check every second
                    end
                end
            end
        end
    end

    if not game.PlaceId == 6911148748 and ARwBug then
        AutoRejoinWhenBug()
    end


    local AntiValue = true
    -- Anti Staff
    MinigamesTab:CreateToggle({
        Name = "Anti Staff",
        CurrentValue = true,
        Flag = "Toggle AntiStaff",
        Callback = function(AntiStaffValue)
            AntiValue = AntiStaffValue
        end,
    })
    
    local function antiStaff()
        if not game.PlaceId == 6911148748 then
            coroutine.wrap(function()
                local DevRank = {
                    "Developer",
                    "HeadDeveloper",
                    "OCDID",
                    "Owner",
                    "Staff"
                }
            
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Players = game:GetService("Players")
            
                for _, rankName in ipairs(DevRank) do
                    local folder = ReplicatedStorage.Rank:FindFirstChild(rankName)
                    
                    if folder then
                        for _, child in ipairs(folder:GetChildren()) do
                            if child:IsA("IntValue") then
                                local staffUserId = tonumber(child.Name)
            
                                if staffUserId then
                                    for _, player in ipairs(Players:GetPlayers()) do
                                        if player.UserId == staffUserId then
                                            game.Players.LocalPlayer:Kick("Staff Detected | KeziHub Security Notification")
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)()
        end
    end

    -- Run AntiStaff Function
    if AntiValue then
        print("AntiStaff Executed, you are protected by KeziHub")
        coroutine.wrap(function()
            while Value do
                antiStaff()
                task.wait(5)
            end
        end)()
    else
        coroutine.wrap(function()
            Rayfield:Notify({
                Title = "Anti Staff",
                Content = "Anti Staff is Disabled, you are not protected by KeziHub",
                Duration = 5,
                Image = "rewind",
            })
        end)()
    end
