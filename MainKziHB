-- Rayfield UI Setup
    -- Anti-AFK Script
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        game:GetService("VirtualUser"):CaptureController()
        game:GetService("VirtualUser"):ClickButton2(Vector2.new())
    end)

    local CurrentVersion = 1.0
    local reExecuteScript = true
    
    -- Rayfield Library Load
    local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/Ryfie'))()

    -- UI Setup
    local Window = Rayfield:CreateWindow({
        Name = "Kezi HUB ( Powered By ChatGPT ) V" ..CurrentVersion,
        LoadingTitle = "Kezi Hub",
        LoadingSubtitle = "by KezSoftworks",
        Theme = 'Amethyst',
        ConfigurationSaving = {
            Enabled = true,
            FolderName = "KeziHub",
            FileName = "KeziHubConfig"
        }
    })

    -- Notification
    coroutine.wrap(function()
        while Window do
            Rayfield:Notify({
                Title = "Is there any bugs?",
                Content = "Consider reporting any bugs in KeziHub Discord Server",
                Duration = 6.5,
                Image = "rewind",
            })
            task.wait(90)
        end
    end)()


-- Tab for Stats
    -- Load StatsTab
    local StatsTab = Window:CreateTab("Stats")

    -- Minigames Info Section
    StatsTab:CreateSection("Minigames Stats")
    
    -- Current Points
    local CurrentpointsLabel = StatsTab:CreateParagraph({
        Title = "Current Points",
        Content = "0"
    })

    -- Update Current Points
    coroutine.wrap(function()
        if game.PlaceId == 6911148748 then
            return
        else
            while true do
                local PointLabelText = game:GetService("Players").LocalPlayer.PlayerGui.BoxShop.Container.Box.MinigamePoint
                local CurrentPoints = PointLabelText.Text
                CurrentpointsLabel:Set({Title = "Current Points", Content = tostring(CurrentPoints)})
                task.wait(1)
            end
        end
    end)()


    -- Points Tracking
    local points = 0

    -- Point Label
    local pointsLabel = StatsTab:CreateParagraph({
        Title = "Points Recieved",
        Content = "Start Minigame Autofarm to display points"
    })


-- Tab for Minigames
    -- Load Minigames Tab
    local MinigamesTab = Window:CreateTab("Minigames")

    -- Information
    MinigamesTab:CreateSection("Minigames Information")
    MinigamesTab:CreateParagraph({Title = "Required Information", Content = "Required 6 Instances to use this feature."})

    -- Buy AVANZA Function
    local function buycar()
        local args = {
            [1] = "Buy",
            [2] = "2021Avanza15CVT",
            [3] = "White",
            [4] = "Toyota"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end

    -- Sell AVANZA Function
    local function sellcar()
        local args = {
            [1] = "Sell",
            [2] = "2021Avanza15CVT"
        }
        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteFunctions"):WaitForChild("Dealership"):InvokeServer(unpack(args))
    end    

    -- Minigames Config Section
    MinigamesTab:CreateSection("Minigames AutoFarm")

    -- Pending Loop Time
    local pendingLoopTime = 1.5
    local Input = MinigamesTab:CreateInput({
        Name = "Pending Loop Time",
        CurrentValue = tostring(pendingLoopTime),
        PlaceholderText = "Input Placeholder",
        RemoveTextAfterFocusLost = false,
        Flag = "Input PendingLoopTime",
        Callback = function(Text)
            local time = tonumber(Text)
            if time then
                pendingLoopTime = time
            else
                pendingLoopTime = 1.5
            end
        end,
    })

    -- Default Selected is Lose
    local optionWin = false
    local optionLose = true
    
    -- Win / Lose Selection
    local Selection = MinigamesTab:CreateDropdown({
        Name = "Select Win / Lose",
        Options = {"Win" , "Lose"},
        CurrentOption = "Lose",
        MultipleOptions = false,
        Flag = "",
        Callback = function(Options)
            local SelectedAcc = Options[1]

            if SelectedAcc == "Win" then
                optionWin = true
                optionLose = false
            elseif SelectedAcc == "Lose" then
                optionWin = false
                optionLose = true
            end
        end,
    })

    -- Start Minigame Toggle
    local StartMinigame = MinigamesTab:CreateToggle({
        Name = "Start Minigame",
        CurrentValue = false,
        Flag = "",
        Callback = function(Value)
            -- Turning off Rendering
            local function optimizeON()
                local objects = {
                    "Lampu Kota",
                    "LightingAmbientRevamp",
                    "Stuff",
                    "RoadLight"
                }
            
                for _, folderName in ipairs(objects) do
                    local folder = workspace:FindFirstChild(folderName)
                    local folder1 = workspace.Map:FindFirstChild(folderName)  -- Make sure folder1 is checked here
            
                    -- Destroy folder if it exists in either location
                    if folder then
                        folder:Destroy()
                    end
                    if folder1 then
                        folder1:Destroy()
                    end
                end
            end

            -- Global Variables for Minigame States
            local isMiniGameWinActive = false
            local isMiniGameLoseActive = false
            local player = game.Players.LocalPlayer

            -- Function to enter the minigame
            local function enterMinigame(vehicle)
                local args = {
                    [1] = "Enter",
                    [2] = vehicle
                }
                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
            end

            -- Function to leave the minigame
            local function leaveMinigame(vehicle)
                local args = {
                    [1] = "Leave",
                    [2] = vehicle
                }
                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Minigames"):FireServer(unpack(args))
                
                sellcar()
            end

            local function Jump()
                coroutine.wrap(function()
                    -- Exit Car at Minigame
                    while isMiniGameLoseActive do
                        local player = game.Players.LocalPlayer
                        local vehicleName = player.Name .. "sCar"
                        local vehicleFolder = workspace.Vehicles
                        local vehicle = vehicleFolder:FindFirstChild(vehicleName)
            
                        while not vehicle do
                            task.wait(1)
                            vehicle = vehicleFolder:FindFirstChild(vehicleName)
                        end
            
                        local character = player.Character or player.CharacterAdded:Wait()
                        local humanoid = character:WaitForChild("Humanoid")
            
                        while vehicle and vehicle.Parent do
                            humanoid.Jump = true
                            wait(0.5)
                        end
                    end
                end)()
            end

            -- Minigame AutoFarm Callback
            if Value then
                buycar()
                enterMinigame("2021Avanza15CVT")
                optimizeON()

                if optionWin then
                    isMiniGameWinActive = true
                    isMiniGameLoseActive = false

                    -- Points Stats
                    points = points + 10
                    pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})

                    -- Detect when the character resets
                    player.CharacterAdded:Connect(function()
                        task.wait(pendingLoopTime)
                        if isMiniGameWinActive then
                            coroutine.wrap(function()
                                -- Points Stats
                                points = points + 10
                                pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})
                            end)()

                            enterMinigame("2021Avanza15CVT")
                        end
                    end)

                elseif optionLose then
                    isMiniGameLoseActive = true
                    isMiniGameWinActive = false
                    
                    Jump()

                    -- Points Stats
                    points = points + 5
                    pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})

                    -- Detect when the character resets
                    player.CharacterAdded:Connect(function()
                        task.wait(pendingLoopTime)
                        if isMiniGameLoseActive then
                            coroutine.wrap(function()
                                -- Points Stats
                                points = points + 5
                                pointsLabel:Set({Title = "Points Received", Content = "Points: " .. points})
                            end)()
                            
                            enterMinigame("2021Avanza15CVT")
                            Jump()
                        end
                    end)
                end
            elseif not Value and isMiniGameWinActive or isMiniGameLoseActive then
                leaveMinigame("2021Avanza15CVT")

                -- Stop the minigame and reset variables if the toggle is turned off
                coroutine.wrap(function()
                    isMiniGameWinActive = false
                    isMiniGameLoseActive = false
                    
                    -- Points Stats
                    points = 0
                    pointsLabel:Set({Title = "Points Received", Content = "Start Minigame Autofarm to display points"})
                    
                    -- Notify
                    Rayfield:Notify({
                        Title = "Minigames AutoFarm",
                        Content = "Minigames AutoFarm is Disabled",
                        Duration = 5,
                        Image = "rewind",
                    })
                end)()

                -- Reset Character and leave the minigame
                if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
                    player.Character:FindFirstChildOfClass("Humanoid").Health = 0
                end
            end
        end,
    })


    -- Minigames Settings Section
    MinigamesTab:CreateSection("Minigames Settings")

    local ARwBug = true

    -- Auto Rejoin when Bug Toggle
    MinigamesTab:CreateToggle({
        Name = "Auto Rejoin when Bug",
        CurrentValue = true,
        Flag = "Toggle AutoRejoinWhenBug",
        Callback = function(AutoRejoinWhenBug)
            ARwBug = AutoRejoinWhenBug
        end,
    })

    -- Auto Rejoin when Bug
    local function AutoRejoinWhenBug()
        local blackoutDuration = 0
        local maxDuration = 300 
        local blackoutGui = game:GetService("StarterGui").Minigame.Main.BlackOut
        
        if ARwBug then
            if not game.PlaceId == 6911148748 then
                if blackoutGui.Visible then
                    local startTime = tick()
                    
                    -- Keep checking for the blackout duration
                    while blackoutGui.Visible do
                        blackoutDuration = tick() - startTime
                        
                        if blackoutDuration >= maxDuration then
                            -- Disable Auto Execute
                            reExecuteScript = false

                            -- AutoRejoin Variables
                            local Players = game:GetService("Players")
                            local TeleportService = game:GetService("TeleportService")
                            
                            -- Executor's Support
                            queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
                            httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
                
                            -- Store current PlaceId and JobId
                            local PlaceId, JobId = game.PlaceId, game.JobId

                            Players.LocalPlayer.OnTeleport:Connect(function(State)
                                if queueteleport then
                                    -- Queue the PrivateServer join and script execution
                                    queueteleport([[
                                        loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueTpp'))()
                                        local args = {
                                            [1] = "Join",
                                            [2] = "45e0e7545845660",  -- The private server ID
                                            [3] = "Jakarta"
                                        }
                                        game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                                    ]])
                                end
                            end)
                        end
            
                        task.wait(5)  -- Check every second
                    end
                end
            end
        end
    end

    if not game.PlaceId == 6911148748 and ARwBug then
        AutoRejoinWhenBug()
    end


    local Value = true
    -- Anti Staff
    MinigamesTab:CreateToggle({
        Name = "Anti Staff",
        CurrentValue = true,
        Flag = "Toggle AntiStaff",
        Callback = function(AntiStaffValue)
            Value = AntiStaffValue
        end,
    })
    
    local function antiStaff()
        if not game.PlaceId == 6911148748 then
            coroutine.wrap(function()
                local DevRank = {
                    "Developer",
                    "HeadDeveloper",
                    "OCDID",
                    "Owner",
                    "Staff"
                }
            
                local ReplicatedStorage = game:GetService("ReplicatedStorage")
                local Players = game:GetService("Players")
            
                for _, rankName in ipairs(DevRank) do
                    local folder = ReplicatedStorage.Rank:FindFirstChild(rankName)
                    
                    if folder then
                        for _, child in ipairs(folder:GetChildren()) do
                            if child:IsA("IntValue") then
                                local staffUserId = tonumber(child.Name)
            
                                if staffUserId then
                                    for _, player in ipairs(Players:GetPlayers()) do
                                        if player.UserId == staffUserId then
                                            game.Players.LocalPlayer:Kick("Staff Detected | KeziHub Security Notification")
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end)()
        end
    end

    -- Run AntiStaff Function
    if Value then
        print("AntiStaff Executed, you are protected by KeziHub")
        coroutine.wrap(function()
            while Value do
                antiStaff()
                task.wait(5)
            end
        end)()
    else
        coroutine.wrap(function()
            Rayfield:Notify({
                Title = "Anti Staff",
                Content = "Anti Staff is Disabled, you are not protected by KeziHub",
                Duration = 5,
                Image = "rewind",
            })
        end)()
    end
    

-- Tab for Misc
    -- Load MiscTab
    local MiscTab = Window:CreateTab("Misc")

    -- Box Section
    MiscTab:CreateSection("Box")

    -- Local's for Gacha
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local StarterGui = game:GetService("StarterGui")

    -- Open Gacha UI
    MiscTab:CreateButton({
        Name = "Open Gacha UI",
        Callback = function()
            fireproximityprompt(workspace.Etc.NPC.BOXSHOP.ProximityPrompt)
        end,
    })

    -- Auto Gacha Section
    local Section = MiscTab:CreateSection("Autogacha")

    -- Auto Gacha Function
    local disablegacha = false
    local disablegacha1 = false

    -- Minigame Gacha
    local function startgacha()
        if disablegacha == false then
            while startgacha do
                local button = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

                if button then
                    local actionArgs = {
                        [1] = "Buy",
                        [2] = "Minigame Box"
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
                end

                task.wait(.1)

                if disablegacha then
                    break
                end
            end
        end
    end

    -- Limited Gacha
    local function startgacha1()
        if disablegacha1 == false then
            while startgacha1 do
                local button = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

                if button then
                    local actionArgs = {
                        [1] = "Buy",
                        [2] = "Limited Box"
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
                end

                task.wait(.1)

                if disablegacha1 then
                    break
                end
            end
        end
    end

    -- Gamepass Gacha
    local function startgacha2()
        if disablegacha1 == false then
            while startgacha2 do
                local button = game:GetService("StarterGui").Gacha.Container.Winning.TextButton

                if button then
                    local actionArgs = {
                        [1] = "Buy",
                        [2] = "Gamepass Box"
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("Box"):FireServer(unpack(actionArgs))
                end

                task.wait(.1)

                if disablegacha2 then
                    break
                end
            end
        end
    end

    -- Auto Gacha Minigames Toggle
    MiscTab:CreateToggle({
        Name = "AutoGacha Minigames",
        CurrentValue = false,
        Flag = "",
        Callback = function(Value)
            if Value then
                disablegacha = false
                startgacha()
            else
                disablegacha = true
            end
        end,
    })

    -- Auto Gacha Limited Toggle
    MiscTab:CreateToggle({
        Name = "AutoGacha Limited Box",
        CurrentValue = false,
        Flag = "",
        Callback = function(Value)
            if Value then
                disablegacha1 = false
                startgacha1()
            else
                disablegacha1 = true
            end
        end,
    })

    -- Auto Gacha Gamepass Toggle
    MiscTab:CreateToggle({
        Name = "AutoGacha Gamepass Box",
        CurrentValue = false,
        Flag = "",
        Callback = function(Value)
            if Value then
                disablegacha2 = false
                startgacha2()
            else
                disablegacha2 = true
            end
        end,
    })

    -- Dealers Section
    MiscTab:CreateSection("Car Dealers")

    -- Dealers
    MiscTab:CreateDropdown({
        Name = "Open Dealers",
        Options = {"77", "Audi", "Bandung", "BMW", "Daihatsu", "Honda", "Hyundai", "KIA", "Komersial", "Lexus", "Mazda", "MercedesBenz", "Mitsubishi", "Nissan", "Otnas", "Premium", "Suzuki", "Toyota", "VW", "Wuling"},
        CurrentOption = {"None"},
        MultipleOptions = false,
        Flag = "",
        Callback = function(Options)
            local selectedDealer = Options[1]
            local dealership = workspace.Etc.Dealership
            
            local dealerFolder = dealership:FindFirstChild(selectedDealer)
            
            if dealership and dealerFolder and dealerFolder:FindFirstChild("Prompt") then
                fireproximityprompt(dealerFolder.Prompt)
            else
                Rayfield:Notify({
                    Title = "Dealership",
                    Content = "The Dealer u choose is not available or located in another province",
                    Duration = 5,
                    Image = "rewind",
                })
            end
        end,
    })


-- Tab for Settings
    -- Load SettingsTab
    local SettingsTab = Window:CreateTab("Settings")

    -- Auto Rejoiner Section
    SettingsTab:CreateSection("Auto Rejoiner")

    -- Map Variables
    local alrSelectMap = false
    local SelectJakarta = false
    local SelectJawaBarat = false
    local SelectJawaTengah = false

    -- Default Jakarta
    if SelectJakarta == false then
        SelectJakarta = true
        SelectJawaBarat = false
        SelectJawaTengah = false
        alrSelectMap = true
    end

    -- Map Selection
    SettingsTab:CreateDropdown({
        Name = "Select Map",
        Options = {"Jakarta","JawaBarat","JawaTengah"},
        CurrentOption = {"Jakarta"},
        MultipleOptions = false,
        Flag = "Dropdown SelectMap",
        Callback = function(Options)
            local selectedMap = Options[1]

            if selectedMap == "Jakarta" then
                SelectJakarta = true
                SelectJawaBarat = false
                SelectJawaTengah = false
            
            elseif selectedMap == "JawaBarat" then
                SelectJakarta = false
                SelectJawaBarat = true
                SelectJawaTengah = false
            
            elseif selectedMap == "JawaTengah" then
                SelectJakarta = false
                SelectJawaBarat = false
                SelectJawaTengah = true
            end
        end,
    })

    -- Rejoin Button
    SettingsTab:CreateButton({
        Name = "Rejoin Private Server",
        Callback = function(Value)
            local Players = game:GetService("Players")
            local TeleportService = game:GetService("TeleportService")
            
            -- Executor's Support
            queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
            httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

            -- Store current PlaceId and JobId
            local PlaceId, JobId = game.PlaceId, game.JobId

            -- Connecting to the OnTeleport event
            if SelectJakarta then
                alrSelectMap = true
                Players.LocalPlayer.OnTeleport:Connect(function(State)
                    if queueteleport then
                        -- Queue the PrivateServer join and script execution
                        queueteleport([[
                            loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueT7'))()
                            local args = {
                                [1] = "Join",
                                [2] = "4a9667557708070",  -- The private server ID
                                [3] = "Jakarta"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                        ]])
                    end
                end)

            elseif SelectJawaBarat then
                alrSelectMap = true
                Players.LocalPlayer.OnTeleport:Connect(function(State)
                    if queueteleport then
                        -- Queue the PrivateServer join and script execution
                        queueteleport([[
                            loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueT7'))()
                            local args = {
                                [1] = "Join",
                                [2] = "4a9667557708070",  -- The private server ID
                                [3] = "JawaBarat"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                        ]])
                    end
                end)

            elseif SelectJawaTengah then
                alrSelectMap = true
                Players.LocalPlayer.OnTeleport:Connect(function(State)
                    if queueteleport then

                        -- Queue the PrivateServer join and script execution
                        queueteleport([[
                            loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/QueueT7'))()
                            local args = {
                                [1] = "Join",
                                [2] = "4a9667557708070",  -- The private server ID
                                [3] = "JawaTengah"
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
                        ]])
                    end
                end)
            end
            
            local province = selectedMap or "Jakarta"

            local function joinmapwithoutMainmenu()
                reExecuteScript = true
                local args = {
                    [1] = "Join",
                    [2] = "4a9667557708070",
                    [3] = province
                }
                game:GetService("ReplicatedStorage"):WaitForChild("NetworkContainer"):WaitForChild("RemoteEvents"):WaitForChild("PrivateServer"):FireServer(unpack(args))
            end

            if alrSelectMap then
                if game.PlaceId == 6911148748 then
                    joinmapwithoutMainmenu()
                else
                    reExecuteScript = false
                    TeleportService:Teleport(6911148748)
                end
            else
                coroutine.wrap(function()
                    Rayfield:Notify({
                        Title = "Auto Rejoiner",
                        Content = "Select Map before Auto Rejoin",
                        Duration = 3,
                        Image = "rewind",
                    })
                end)()

                task.wait(3)
                return
            end
        end,
    })

    -- Delete UI Section
    SettingsTab:CreateSection("Disable Hub")

    -- Disable All Loops
    local function disableloops()
        Window = false
        optionWin = false
        optionLose = false
        isMiniGameWinActive = false
        isMiniGameLoseActive = false
        disablegacha = true
        disablegacha1 = true
        disablegacha2 = true
        SelectJakarta = false
        SelectJawaBarat = false
        SelectJawaTengah = false
        ARwBug = false
        AntiStaffValue = false
    end

    -- Destroy Button
    SettingsTab:CreateButton({
        Name = "Disable Script",
        Callback = function()
            Rayfield:Notify({
                Title = "Disable Script",
                Content = "Thank you for using Kezi Hub",
                Duration = 5,
                Image = "rewind",
            })

            disableloops()
            task.wait(5)
            Rayfield:Destroy()
        end,
    })

-- Re-ExecuteScriptWhenTeleport
    local Players = game:GetService("Players")
    local TeleportService = game:GetService("TeleportService")
    
    -- Executor's Support
    queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
    httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request

    -- Store current PlaceId and JobId
    local PlaceId, JobId = game.PlaceId, game.JobId

    -- Connecting to the OnTeleport event
    if reExecuteScript then
        Players.LocalPlayer.OnTeleport:Connect(function(State)
            if queueteleport then
                -- Primary Script
                queueteleport([[
                    loadstring(game:HttpGet('https://raw.githubusercontent.com/Mike0904/MGGS1/refs/heads/main/MainKziHB'))()
                ]])
            end
        end)
    end

-- Disable UI Reset
    local ScreenGui = Window
    ScreenGui.ResetOnSpawn = false
